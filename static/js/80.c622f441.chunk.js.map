{"version":3,"sources":["main/content/components/fuse-dialog/FuseDialogDoc.js"],"names":["FuseDialogDoc","_this","this","classes","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_fuse__WEBPACK_IMPORTED_MODULE_7__","root","layoutRoot","header","className","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","variant","content","component","_material_ui_core_Button_Button__WEBPACK_IMPORTED_MODULE_9___default","onClick","openDialog","children","Fragment","id","closeDialog","color","autoFocus","Component","withStyles","theme","withTheme","connect","dispatch","bindActionCreators","Actions"],"mappings":"+NAaMA,mLAGF,IAAAC,EAAAC,KACWC,EAAWD,KAAKE,MAAhBD,QAEP,OACIE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIL,QAAS,CACLM,KAAMN,EAAQO,YAElBC,OACIN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iDACXP,EAAAC,EAAAC,cAACM,EAAA,GAAD,CAAYC,QAAQ,MAApB,eAGRC,QACIV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,0BAEXP,EAAAC,EAAAC,cAACM,EAAA,GAAD,CAAYD,UAAU,QAAQI,UAAU,KACpCX,EAAAC,EAAAC,cAAA,QAAMK,UAAU,iBAAhB,cADJ,wGAEIP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,iBAAhB,cAFJ,KAKAP,EAAAC,EAAAC,cAACM,EAAA,GAAD,CAAYD,UAAU,qBAAqBI,UAAU,MAArD,SAEAX,EAAAC,EAAAC,cAACM,EAAA,GAAD,CAAYD,UAAU,QAAQI,UAAU,KAAxC,gJAIAX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeQ,UAAU,MAAMJ,UAAU,eAAzC,ksDAgCAP,EAAAC,EAAAC,cAACM,EAAA,GAAD,CAAYD,UAAU,qBAAqBI,UAAU,MAArD,WAEAX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACIY,QAAS,kBAAMjB,EAAKG,MAAMe,WAAW,CACjCC,SACIf,EAAAC,EAAAC,cAACF,EAAAC,EAAMe,SAAP,KACIhB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAaS,GAAG,sBAAhB,kCACAjB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAmBS,GAAG,4BAAtB,kIAKJjB,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQY,QAASjB,EAAKG,MAAMmB,YAAaC,MAAM,WAA/C,YAGAnB,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQY,QAASjB,EAAKG,MAAMmB,YAAaC,MAAM,UAAUC,WAAS,GAAlE,cAOhBX,QAAQ,YACRU,MAAM,aAvBV,yBAhEIE,aA2GbC,+BA/GA,SAAAC,GAAK,MAAK,CACrBlB,WAAY,KA8GkB,CAACmB,WAAW,GAA/BF,CAAsCG,YAAQ,KAT7D,SAA4BC,GAExB,OAAOC,YAAmB,CAClBb,WAAac,IACbV,YAAaU,KAEjBF,IAG6CD,CAAkC9B","file":"static/js/80.c622f441.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles/index';\nimport {FuseHighlight, FusePageSimple} from '@fuse';\nimport {Typography, DialogTitle, DialogContent, DialogContentText, DialogActions} from '@material-ui/core';\nimport Button from '@material-ui/core/Button/Button';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from 'store/actions';\n\nconst styles = theme => ({\n    layoutRoot: {}\n});\n\nclass FuseDialogDoc extends Component {\n\n    render()\n    {\n        const {classes} = this.props;\n\n        return (\n            <FusePageSimple\n                classes={{\n                    root: classes.layoutRoot\n                }}\n                header={\n                    <div className=\"flex flex-1 items-center justify-between p-24\">\n                        <Typography variant=\"h6\">FuseDialog</Typography>\n                    </div>\n                }\n                content={\n                    <div className=\"p-24 max-w-2xl mx-auto\">\n\n                        <Typography className=\"mb-16\" component=\"p\">\n                            <code className=\"language-bash\">FuseDialog</code> is a simple dialog trigger for easily showing dialog messages via redux action. It is located in the\n                            <code className=\"language-bash\">FuseLayout</code>.\n                        </Typography>\n\n                        <Typography className=\"text-32 mt-32 mb-8\" component=\"h2\">Usage</Typography>\n\n                        <Typography className=\"mb-16\" component=\"p\">\n                            You can show dialog anywhere with dispatching the action openDialog, its using Material-UI's dialog so you can pass the props in the object:\n                        </Typography>\n\n                        <FuseHighlight component=\"pre\" className=\"language-js\">\n                            {`\n                        <Button\n                            onClick={() => this.props.openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id=\"alert-dialog-description\">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={this.props.closeDialog} color=\"primary\">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={this.props.closeDialog} color=\"primary\" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                )\n                            })}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                        Open Dialog\n                        </Button>\n                            `}\n                        </FuseHighlight>\n\n                        <Typography className=\"text-32 mt-32 mb-8\" component=\"h2\">Example</Typography>\n\n                        <Button\n                            onClick={() => this.props.openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id=\"alert-dialog-title\">Use Google's location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id=\"alert-dialog-description\">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={this.props.closeDialog} color=\"primary\">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={this.props.closeDialog} color=\"primary\" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                )\n                            })}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Open Dialog\n                        </Button>\n                    </div>\n                }\n            />\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n            openDialog : Actions.openDialog,\n            closeDialog: Actions.closeDialog\n        },\n        dispatch);\n}\n\nexport default withStyles(styles, {withTheme: true})(connect(null, mapDispatchToProps)(FuseDialogDoc));\n"],"sourceRoot":""}