{"version":3,"sources":["main/content/apps/contacts/store/actions/user.actions.js","main/content/apps/contacts/store/actions/contacts.actions.js","main/content/apps/contacts/ContactsList.js","main/content/apps/contacts/ContactsHeader.js","main/content/apps/contacts/ContactsSidebarContent.js","main/content/apps/contacts/ContactDialog.js","main/content/apps/contacts/store/reducers/contacts.reducer.js","main/content/apps/contacts/store/reducers/user.reducer.js","main/content/apps/contacts/store/reducers/index.js","main/content/apps/contacts/ContactsApp.js"],"names":["GET_USER_DATA","getUserData","request","axios","get","dispatch","then","response","type","payload","data","GET_CONTACTS","SET_SEARCH_TEXT","TOGGLE_IN_SELECTED_CONTACTS","SELECT_ALL_CONTACTS","DESELECT_ALL_CONTACTS","OPEN_NEW_CONTACT_DIALOG","CLOSE_NEW_CONTACT_DIALOG","OPEN_EDIT_CONTACT_DIALOG","CLOSE_EDIT_CONTACT_DIALOG","ADD_CONTACT","UPDATE_CONTACT","REMOVE_CONTACT","REMOVE_CONTACTS","TOGGLE_STARRED_CONTACT","TOGGLE_STARRED_CONTACTS","SET_CONTACTS_STARRED","getContacts","routeParams","params","setSearchText","event","searchText","target","value","toggleInSelectedContacts","contactId","selectAllContacts","deSelectAllContacts","openNewContactDialog","closeNewContactDialog","openEditContactDialog","closeEditContactDialog","addContact","newContact","getState","contactsApp","contacts","post","Promise","all","updateContact","contact","removeContact","removeContacts","contactIds","toggleStarredContact","toggleStarredContacts","setContactsStarred","setContactsUnstarred","ContactsList","state","selectedContactsMenu","getFilteredArray","entities","arr","Object","keys","map","id","length","FuseUtils","filterArrayByString","openSelectedContactMenu","_this","setState","currentTarget","closeSelectedContactsMenu","_this2","this","_this$props","props","classes","user","selectedContactIds","react_default","a","createElement","_fuse","animation","delay","react_table_es","className","classNames","root","getTrProps","rowInfo","column","onClick","e","handleOriginal","original","columns","Header","index_es","stopPropagation","onChange","checked","indeterminate","accessor","Cell","row","includes","sortable","width","Fragment","aria-owns","aria-haspopup","anchorEl","open","Boolean","onClose","icon","inset","primary","alt","name","src","filterable","ev","starred","defaultPageSize","noDataText","color","variant","Component","withStyles","theme","mailList","padding","mailItem","avatar","backgroundColor","palette","labels","withTheme","withRouter","connect","_ref","bindActionCreators","Actions","ContactsHeader","pageLayout","lgUp","toggleLeftSidebar","aria-label","styles","FuseSelectedTheme","elevation","placeholder","disableUnderline","fullWidth","inputProps","ContactsSidebarContent","button","component","NavLink","to","activeClassName","listItem","disableTypography","textDecoration","height","borderRadius","paddingLeft","paddingRight","&.active","secondary","main","contrastText","pointerEvents","& .list-item-icon","newContactState","lastName","nickname","company","jobTitle","email","phone","address","birthday","notes","ContactDialog","handleChange","_","set","objectSpread","closeComposeDialog","contactDialog","prevProps","prevState","snapshot","isEqual","assign","paper","maxWidth","position","formControl","label","autoFocus","required","InputLabelProps","shrink","multiline","rows","disabled","canBeSubmitted","marginBottom","initialState","contactsReducer","arguments","undefined","action","keyBy","toConsumableArray","find","filter","concat","k","userReducer","reducer","combineReducers","ContactsApp","match","location","contentCardWrapper","leftSidebar","header","contacts_ContactsHeader","content","contacts_ContactsList","leftSidebarContent","contacts_ContactsSidebarContent","sidebarInner","onRef","instance","innerScroll","addButton","contacts_ContactDialog","withReducer","right","bottom","zIndex"],"mappings":"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","file":"static/js/8.578778a7.chunk.js","sourcesContent":["import axios from 'axios/index';\n\nexport const GET_USER_DATA = '[CONTACTS APP] GET USER DATA';\n\nexport function getUserData()\n{\n    const request = axios.get('/api/contacts-app/user');\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type   : GET_USER_DATA,\n                payload: response.data\n            })\n        );\n}\n","import axios from 'axios/index';\nimport {getUserData} from 'main/content/apps/contacts/store/actions/user.actions';\n\nexport const GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport const SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport const TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport const SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport const DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport const OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport const CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport const OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport const CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport const ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport const UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport const REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport const REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport const TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport const TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport const SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\n\nexport function getContacts(routeParams)\n{\n    const request = axios.get('/api/contacts-app/contacts', {\n        params: routeParams\n    });\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type   : GET_CONTACTS,\n                payload: response.data,\n                routeParams\n            })\n        );\n}\n\nexport function setSearchText(event)\n{\n    return {\n        type      : SET_SEARCH_TEXT,\n        searchText: event.target.value\n    }\n}\n\nexport function toggleInSelectedContacts(contactId)\n{\n    return {\n        type: TOGGLE_IN_SELECTED_CONTACTS,\n        contactId\n    }\n}\n\n\nexport function selectAllContacts()\n{\n    return {\n        type: SELECT_ALL_CONTACTS\n    }\n}\n\nexport function deSelectAllContacts()\n{\n    return {\n        type: DESELECT_ALL_CONTACTS\n    }\n}\n\n\nexport function openNewContactDialog()\n{\n    return {\n        type: OPEN_NEW_CONTACT_DIALOG\n    }\n}\n\nexport function closeNewContactDialog()\n{\n    return {\n        type: CLOSE_NEW_CONTACT_DIALOG\n    }\n}\n\nexport function openEditContactDialog(data)\n{\n    return {\n        type: OPEN_EDIT_CONTACT_DIALOG,\n        data\n    }\n}\n\nexport function closeEditContactDialog()\n{\n    return {\n        type: CLOSE_EDIT_CONTACT_DIALOG\n    }\n}\n\nexport function addContact(newContact)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/add-contact', {\n            newContact\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: ADD_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function updateContact(contact)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/update-contact', {\n            contact\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: UPDATE_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function removeContact(contactId)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/remove-contact', {\n            contactId\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\n\nexport function removeContacts(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/remove-contacts', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                })\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function toggleStarredContact(contactId)\n{\n    return (dispatch, getState) => {\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/toggle-starred-contact', {\n            contactId\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACT\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function toggleStarredContacts(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function setContactsStarred(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/set-contacts-starred', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: SET_CONTACTS_STARRED\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function setContactsUnstarred(contactIds)\n{\n    return (dispatch, getState) => {\n\n        const {routeParams} = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n            contactIds\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: SET_CONTACTS_STARRED\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n","import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {FuseUtils, FuseAnimate} from '@fuse';\nimport {Avatar, Checkbox, Icon, IconButton, ListItemIcon, ListItemText, Menu, MenuItem, MenuList, Typography} from '@material-ui/core';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from './store/actions';\nimport ReactTable from \"react-table\";\nimport classNames from 'classnames';\n\nconst styles = theme => ({\n    mailList: {\n        padding: 0\n    },\n    mailItem: {},\n    avatar  : {\n        backgroundColor: theme.palette.primary[500]\n    },\n    labels  : {}\n\n});\n\nclass ContactsList extends Component {\n\n    state = {\n        selectedContactsMenu: null\n    };\n\n    getFilteredArray = (entities, searchText) => {\n        const arr = Object.keys(entities).map((id) => entities[id]);\n        if ( searchText.length === 0 )\n        {\n            return arr;\n        }\n        return FuseUtils.filterArrayByString(arr, searchText);\n    };\n\n    openSelectedContactMenu = (event) => {\n        this.setState({selectedContactsMenu: event.currentTarget});\n    };\n\n    closeSelectedContactsMenu = () => {\n        this.setState({selectedContactsMenu: null});\n    };\n\n    render()\n    {\n        const {classes, contacts, user, searchText, selectedContactIds, selectAllContacts, deSelectAllContacts, toggleInSelectedContacts, openEditContactDialog, removeContacts, removeContact, toggleStarredContact, setContactsUnstarred, setContactsStarred} = this.props;\n        const data = this.getFilteredArray(contacts, searchText);\n        const {selectedContactsMenu} = this.state;\n\n        if ( !data && data.length === 0 )\n        {\n            return (\n                <div className=\"flex items-center justify-center h-full\">\n                    <Typography color=\"textSecondary\" variant=\"h5\">\n                        There are no contacts!\n                    </Typography>\n                </div>\n            );\n        }\n\n        return (\n            <FuseAnimate animation=\"transition.slideUpIn\" delay={300}>\n                <ReactTable\n                    className={classNames(classes.root, \"-striped -highlight border-0\")}\n                    getTrProps={(state, rowInfo, column) => {\n                        return {\n                            className: \"cursor-pointer\",\n                            onClick  : (e, handleOriginal) => {\n                                if ( rowInfo )\n                                {\n                                    openEditContactDialog(rowInfo.original);\n                                }\n                            }\n                        }\n                    }}\n                    data={data}\n                    columns={[\n                        {\n                            Header   : () => (\n                                <Checkbox\n                                    onClick={(event) => {\n                                        event.stopPropagation();\n                                    }}\n                                    onChange={(event) => {\n                                        event.target.checked ? selectAllContacts() : deSelectAllContacts();\n                                    }}\n                                    checked={selectedContactIds.length === Object.keys(contacts).length && selectedContactIds.length > 0}\n                                    indeterminate={selectedContactIds.length !== Object.keys(contacts).length && selectedContactIds.length > 0}\n                                />\n                            ),\n                            accessor : \"\",\n                            Cell     : row => {\n                                return (<Checkbox\n                                        onClick={(event) => {\n                                            event.stopPropagation();\n                                        }}\n                                        checked={selectedContactIds.includes(row.value.id)}\n                                        onChange={() => toggleInSelectedContacts(row.value.id)}\n                                    />\n                                )\n                            },\n                            className: \"justify-center\",\n                            sortable : false,\n                            width    : 64\n                        },\n                        {\n                            Header   : () => (\n                                selectedContactIds.length > 0 && (\n                                    <React.Fragment>\n                                        <IconButton\n                                            aria-owns={selectedContactsMenu ? 'selectedContactsMenu' : null}\n                                            aria-haspopup=\"true\"\n                                            onClick={this.openSelectedContactMenu}\n                                        >\n                                            <Icon>more_horiz</Icon>\n                                        </IconButton>\n                                        <Menu\n                                            id=\"selectedContactsMenu\"\n                                            anchorEl={selectedContactsMenu}\n                                            open={Boolean(selectedContactsMenu)}\n                                            onClose={this.closeSelectedContactsMenu}\n                                        >\n                                            <MenuList>\n                                                <MenuItem\n                                                    onClick={() => {\n                                                        removeContacts(selectedContactIds);\n                                                        this.closeSelectedContactsMenu();\n                                                    }}\n                                                >\n                                                    <ListItemIcon className={classes.icon}>\n                                                        <Icon>delete</Icon>\n                                                    </ListItemIcon>\n                                                    <ListItemText inset primary=\"Remove\"/>\n                                                </MenuItem>\n                                                <MenuItem\n                                                    onClick={() => {\n                                                        setContactsStarred(selectedContactIds);\n                                                        this.closeSelectedContactsMenu();\n                                                    }}\n                                                >\n                                                    <ListItemIcon className={classes.icon}>\n                                                        <Icon>star</Icon>\n                                                    </ListItemIcon>\n                                                    <ListItemText inset primary=\"Starred\"/>\n                                                </MenuItem>\n                                                <MenuItem\n                                                    onClick={() => {\n                                                        setContactsUnstarred(selectedContactIds);\n                                                        this.closeSelectedContactsMenu();\n                                                    }}\n                                                >\n                                                    <ListItemIcon className={classes.icon}>\n                                                        <Icon>star_border</Icon>\n                                                    </ListItemIcon>\n                                                    <ListItemText inset primary=\"Unstarred\"/>\n                                                </MenuItem>\n                                            </MenuList>\n                                        </Menu>\n                                    </React.Fragment>\n                                )\n                            ),\n                            accessor : \"avatar\",\n                            Cell     : row => (\n                                <Avatar className=\"mr-8\" alt={row.original.name} src={row.value}/>\n                            ),\n                            className: \"justify-center\",\n                            width    : 64,\n                            sortable : false\n                        },\n                        {\n                            Header    : \"First Name\",\n                            accessor  : \"name\",\n                            filterable: true,\n                            className : \"font-bold\"\n                        },\n                        {\n                            Header    : \"Last Name\",\n                            accessor  : \"lastName\",\n                            filterable: true,\n                            className : \"font-bold\"\n                        },\n                        {\n                            Header    : \"Company\",\n                            accessor  : \"company\",\n                            filterable: true\n                        },\n                        {\n                            Header    : \"Job Title\",\n                            accessor  : \"jobTitle\",\n                            filterable: true\n                        },\n                        {\n                            Header    : \"Email\",\n                            accessor  : \"email\",\n                            filterable: true\n                        },\n                        {\n                            Header    : \"Phone\",\n                            accessor  : \"phone\",\n                            filterable: true\n                        },\n                        {\n                            Header: \"\",\n                            width : 128,\n                            Cell  : row => (\n                                <div className=\"flex items-center\">\n                                    <IconButton\n                                        onClick={(ev) => {\n                                            ev.stopPropagation();\n                                            toggleStarredContact(row.original.id)\n                                        }}\n                                    >\n                                        {user.starred && user.starred.includes(row.original.id) ? (\n                                            <Icon>star</Icon>\n                                        ) : (\n                                            <Icon>star_border</Icon>\n                                        )}\n                                    </IconButton>\n                                    <IconButton\n                                        onClick={(ev) => {\n                                            ev.stopPropagation();\n                                            removeContact(row.original.id);\n                                        }}\n                                    >\n                                        <Icon>delete</Icon>\n                                    </IconButton>\n                                </div>\n                            )\n                        }\n                    ]}\n                    defaultPageSize={10}\n                    noDataText=\"No contacts found\"\n                />\n            </FuseAnimate>\n        );\n    }\n}\n\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        getContacts             : Actions.getContacts,\n        getUserData             : Actions.getUserData,\n        toggleInSelectedContacts: Actions.toggleInSelectedContacts,\n        selectAllContacts       : Actions.selectAllContacts,\n        deSelectAllContacts     : Actions.deSelectAllContacts,\n        openEditContactDialog   : Actions.openEditContactDialog,\n        removeContacts          : Actions.removeContacts,\n        removeContact           : Actions.removeContact,\n        toggleStarredContact    : Actions.toggleStarredContact,\n        toggleStarredContacts   : Actions.toggleStarredContacts,\n        setContactsStarred      : Actions.setContactsStarred,\n        setContactsUnstarred    : Actions.setContactsUnstarred\n    }, dispatch);\n}\n\nfunction mapStateToProps({contactsApp})\n{\n    return {\n        contacts          : contactsApp.contacts.entities,\n        selectedContactIds: contactsApp.contacts.selectedContactIds,\n        searchText        : contactsApp.contacts.searchText,\n        user              : contactsApp.user\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsList)));\n","import React, {Component} from 'react';\nimport {MuiThemeProvider, withStyles} from '@material-ui/core/styles/index';\nimport {Hidden, Icon, IconButton, Input, Paper, Typography} from '@material-ui/core';\nimport * as Actions from './store/actions';\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport classNames from 'classnames';\nimport {FuseAnimate, FuseSelectedTheme} from '@fuse';\n\nconst styles = theme => ({\n    root: {}\n});\n\nclass ContactsHeader extends Component {\n\n    render()\n    {\n        const {classes, setSearchText, searchText, pageLayout} = this.props;\n        return (\n            <div className={classNames(classes.root, \"flex flex-1 items-center justify-between p-8 sm:p-24\")}>\n\n                <div className=\"flex flex-shrink items-center sm:w-224\">\n                    <Hidden lgUp>\n                        <IconButton\n                            onClick={(ev) => pageLayout().toggleLeftSidebar()}\n                            aria-label=\"open left sidebar\"\n                        >\n                            <Icon>menu</Icon>\n                        </IconButton>\n                    </Hidden>\n\n                    <div className=\"flex items-center\">\n                        <FuseAnimate animation=\"transition.expandIn\" delay={300}>\n                            <Icon className=\"text-32 mr-12\">account_box</Icon>\n                        </FuseAnimate>\n                        <FuseAnimate animation=\"transition.slideLeftIn\" delay={300}>\n                            <Typography variant=\"h6\" className=\"hidden sm:flex\">Contacts</Typography>\n                        </FuseAnimate>\n                    </div>\n                </div>\n\n                <div className=\"flex flex-1 items-center justify-center pr-8 sm:px-12\">\n\n                    <MuiThemeProvider theme={FuseSelectedTheme}>\n                        <FuseAnimate animation=\"transition.slideLeftIn\" delay={300}>\n                            <Paper className=\"flex p-4 items-center w-full max-w-512 px-8 py-4\" elevation={1}>\n\n                                <Icon className=\"mr-8\" color=\"action\">search</Icon>\n\n                                <Input\n                                    placeholder=\"Search for anything\"\n                                    className=\"flex flex-1\"\n                                    disableUnderline\n                                    fullWidth\n                                    value={searchText}\n                                    inputProps={{\n                                        'aria-label': 'Search'\n                                    }}\n                                    onChange={setSearchText}\n                                />\n                            </Paper>\n                        </FuseAnimate>\n                    </MuiThemeProvider>\n                </div>\n            </div>\n        )\n            ;\n    }\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        setSearchText: Actions.setSearchText\n    }, dispatch);\n}\n\nfunction mapStateToProps({contactsApp})\n{\n    return {\n        searchText: contactsApp.contacts.searchText\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ContactsHeader));\n","import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles/index';\nimport {Avatar, Divider, Icon, List, ListItem, ListItemText, Paper, Typography} from '@material-ui/core';\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {NavLink, withRouter} from 'react-router-dom';\nimport {FuseAnimate} from '@fuse';\n\nconst styles = theme => ({\n    listItem: {\n        color         : 'inherit!important',\n        textDecoration: 'none!important',\n        height        : 40,\n        width         : 'calc(100% - 16px)',\n        borderRadius  : '0 20px 20px 0',\n        paddingLeft   : 24,\n        paddingRight  : 12,\n        '&.active'    : {\n            backgroundColor    : theme.palette.secondary.main,\n            color              : theme.palette.secondary.contrastText + '!important',\n            pointerEvents      : 'none',\n            '& .list-item-icon': {\n                color: 'inherit'\n            }\n        }\n    }\n});\n\nclass ContactsSidebarContent extends Component {\n\n    render()\n    {\n        const {classes, user} = this.props;\n        return (\n            <div className=\"p-16 lg:p-24 lg:pr-4\">\n                <FuseAnimate animation=\"transition.slideLeftIn\" delay={200}>\n                    <Paper elevation={1} className=\"rounded-8\">\n                        <div className=\"p-24 flex items-center\">\n                            <Avatar className=\"mr-12\" alt={user.name} src={user.avatar}/>\n                            <Typography>{user.name}</Typography>\n                        </div>\n                        <Divider/>\n                        <List>\n                            <ListItem\n                                button\n                                component={NavLink}\n                                to={'/apps/contacts/all'}\n                                activeClassName=\"active\"\n                                className={classes.listItem}\n                            >\n                                <Icon className=\"list-item-icon text-16\" color=\"action\">people</Icon>\n                                <ListItemText className=\"truncate pr-0\" primary=\"All contacts\" disableTypography={true}/>\n                            </ListItem>\n                            <ListItem\n                                button\n                                component={NavLink}\n                                to={'/apps/contacts/frequent'}\n                                activeClassName=\"active\"\n                                className={classes.listItem}\n                            >\n                                <Icon className=\"list-item-icon text-16\" color=\"action\">restore</Icon>\n                                <ListItemText className=\"truncate pr-0\" primary=\"Frequently contacted\" disableTypography={true}/>\n                            </ListItem>\n                            <ListItem\n                                button\n                                component={NavLink}\n                                to={'/apps/contacts/starred'}\n                                activeClassName=\"active\"\n                                className={classes.listItem}\n                            >\n                                <Icon className=\"list-item-icon text-16\" color=\"action\">star</Icon>\n                                <ListItemText className=\"truncate pr-0\" primary=\"Starred contacts\" disableTypography={true}/>\n                            </ListItem>\n                        </List>\n                    </Paper>\n                </FuseAnimate>\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({}, dispatch);\n}\n\nfunction mapStateToProps({contactsApp})\n{\n    return {\n        user: contactsApp.user\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsSidebarContent)));\n","import React, {Component} from 'react';\nimport {\n    TextField, Button, Dialog, DialogActions, DialogContent, Icon, IconButton, Typography, Toolbar, AppBar, Avatar\n} from '@material-ui/core';\nimport {withStyles} from '@material-ui/core/styles/index';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from './store/actions';\nimport {connect} from 'react-redux';\nimport _ from '@lodash';\n\nconst styles = theme => ({\n    root       : {},\n    formControl: {\n        marginBottom: 24\n    }\n});\nconst newContactState = {\n    id      : '',\n    name    : '',\n    lastName: '',\n    avatar  : 'assets/images/avatars/profile.jpg',\n    nickname: '',\n    company : '',\n    jobTitle: '',\n    email   : '',\n    phone   : '',\n    address : '',\n    birthday: '',\n    notes   : ''\n};\n\nclass ContactDialog extends Component {\n    state = {...newContactState};\n\n    componentDidUpdate(prevProps, prevState, snapshot)\n    {\n        /**\n         * After Dialog Open\n         */\n        if ( !prevProps.contactDialog.props.open && this.props.contactDialog.props.open )\n        {\n            /**\n             * Dialog type: 'edit'\n             * Update State\n             */\n            if ( this.props.contactDialog.type === 'edit' &&\n                this.props.contactDialog.data &&\n                !_.isEqual(this.props.contactDialog.data, prevState) )\n            {\n                this.setState({...this.props.contactDialog.data});\n            }\n\n            /**\n             * Dialog type: 'new'\n             * Update State\n             */\n            if ( this.props.contactDialog.type === 'new' &&\n                !_.isEqual(newContactState, prevState) )\n            {\n                this.setState({...newContactState});\n            }\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState(_.set({...this.state}, event.target.name, event.target.type === 'checkbox' ? event.target.checked : event.target.value));\n    };\n\n    closeComposeDialog = () => {\n        this.props.contactDialog.type === 'edit' ? this.props.closeEditContactDialog() : this.props.closeNewContactDialog();\n    };\n\n    canBeSubmitted()\n    {\n        const {name} = this.state;\n        return (\n            name.length > 0\n        );\n    }\n\n    render()\n    {\n        const {classes, contactDialog, addContact, updateContact, removeContact} = this.props;\n\n        return (\n            <Dialog\n                classes={{\n                    root : classes.root,\n                    paper: \"m-24\"\n                }}\n                className={classes.root}\n                {...contactDialog.props}\n                onClose={this.closeComposeDialog}\n                fullWidth\n                maxWidth=\"xs\"\n            >\n\n                <AppBar position=\"static\" elevation={1}>\n                    <Toolbar className=\"flex w-full\">\n                        <Typography variant=\"subtitle1\" color=\"inherit\">\n                            {contactDialog.type === 'new' ? 'New Contact' : 'Edit Contact'}\n                        </Typography>\n                    </Toolbar>\n                    <div className=\"flex flex-col items-center justify-center pb-24\">\n                        <Avatar className=\"w-96 h-96\" alt=\"contact avatar\" src={this.state.avatar}/>\n                        {contactDialog.type === 'edit' && (\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"pt-8\">\n                                {this.state.name}\n                            </Typography>\n                        )}\n                    </div>\n                </AppBar>\n\n                <DialogContent classes={{root: \"p-24\"}}>\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">account_circle</Icon>\n                        </div>\n\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Name\"\n                            autoFocus\n                            id=\"name\"\n                            name=\"name\"\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Last name\"\n                            id=\"lastName\"\n                            name=\"lastName\"\n                            value={this.state.lastName}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">star</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Nickname\"\n                            id=\"nickname\"\n                            name=\"nickname\"\n                            value={this.state.nickname}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">phone</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Phone\"\n                            id=\"phone\"\n                            name=\"phone\"\n                            value={this.state.phone}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">email</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Email\"\n                            id=\"email\"\n                            name=\"email\"\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">domain</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Company\"\n                            id=\"company\"\n                            name=\"company\"\n                            value={this.state.company}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">work</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Job title\"\n                            id=\"jobTitle\"\n                            name=\"jobTitle\"\n                            value={this.state.jobTitle}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">cake</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            id=\"birthday\"\n                            label=\"Birthday\"\n                            type=\"date\"\n                            value={this.state.birthday}\n                            onChange={this.handleChange}\n                            InputLabelProps={{\n                                shrink: true\n                            }}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">home</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Address\"\n                            id=\"address\"\n                            name=\"address\"\n                            value={this.state.address}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            fullWidth\n                        />\n                    </div>\n\n                    <div className=\"flex\">\n                        <div className=\"min-w-48 pt-20\">\n                            <Icon color=\"action\">note</Icon>\n                        </div>\n                        <TextField\n                            className={classes.formControl}\n                            label=\"Notes\"\n                            id=\"notes\"\n                            name=\"notes\"\n                            value={this.state.notes}\n                            onChange={this.handleChange}\n                            variant=\"outlined\"\n                            multiline\n                            rows={5}\n                            fullWidth\n                        />\n                    </div>\n                </DialogContent>\n\n                {contactDialog.type === 'new' ? (\n                    <DialogActions className=\"justify-between pl-16\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                addContact(this.state);\n                                this.closeComposeDialog();\n                            }}\n                            disabled={!this.canBeSubmitted()}\n                        >\n                            Add\n                        </Button>\n                    </DialogActions>\n                ) : (\n                    <DialogActions className=\"justify-between pl-16\">\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                                updateContact(this.state);\n                                this.closeComposeDialog();\n                            }}\n                            disabled={!this.canBeSubmitted()}\n                        >\n                            Save\n                        </Button>\n                        <IconButton\n                            onClick={() => {\n                                removeContact(this.state.id);\n                                this.closeComposeDialog();\n                            }}\n                        >\n                            <Icon>delete</Icon>\n                        </IconButton>\n                    </DialogActions>\n                )}\n            </Dialog>\n        );\n    }\n}\n\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        closeEditContactDialog: Actions.closeEditContactDialog,\n        closeNewContactDialog : Actions.closeNewContactDialog,\n        addContact            : Actions.addContact,\n        updateContact         : Actions.updateContact,\n        removeContact         : Actions.removeContact\n    }, dispatch);\n}\n\nfunction mapStateToProps({contactsApp})\n{\n    return {\n        contactDialog: contactsApp.contacts.contactDialog\n    }\n}\n\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ContactDialog));\n","import * as Actions from '../actions';\nimport _ from '@lodash';\n\nconst initialState = {\n    entities          : [],\n    searchText        : '',\n    selectedContactIds: [],\n    routeParams       : {},\n    contactDialog     : {\n        type : 'new',\n        props: {\n            open: false\n        },\n        data : null\n    }\n};\n\nconst contactsReducer = function (state = initialState, action) {\n    switch ( action.type )\n    {\n        case Actions.GET_CONTACTS:\n        {\n            return {\n                ...state,\n                entities   : _.keyBy(action.payload, 'id'),\n                routeParams: action.routeParams\n            };\n        }\n        case Actions.SET_SEARCH_TEXT:\n        {\n            return {\n                ...state,\n                searchText: action.searchText\n            };\n        }\n        case Actions.TOGGLE_IN_SELECTED_CONTACTS:\n        {\n\n            const contactId = action.contactId;\n\n            let selectedContactIds = [...state.selectedContactIds];\n\n            if ( selectedContactIds.find(id => id === contactId) !== undefined )\n            {\n                selectedContactIds = selectedContactIds.filter(id => id !== contactId);\n            }\n            else\n            {\n                selectedContactIds = [...selectedContactIds, contactId];\n            }\n\n            return {\n                ...state,\n                selectedContactIds: selectedContactIds\n            };\n        }\n        case Actions.SELECT_ALL_CONTACTS:\n        {\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\n\n            const selectedContactIds = arr.map(contact => contact.id);\n\n            return {\n                ...state,\n                selectedContactIds: selectedContactIds\n            };\n        }\n        case Actions.DESELECT_ALL_CONTACTS:\n        {\n            return {\n                ...state,\n                selectedContactIds: []\n            };\n        }\n        case Actions.OPEN_NEW_CONTACT_DIALOG:\n        {\n            return {\n                ...state,\n                contactDialog: {\n                    type : 'new',\n                    props: {\n                        open: true\n                    },\n                    data : null\n                }\n            };\n        }\n        case Actions.CLOSE_NEW_CONTACT_DIALOG:\n        {\n            return {\n                ...state,\n                contactDialog: {\n                    type : 'new',\n                    props: {\n                        open: false\n                    },\n                    data : null\n                }\n            };\n        }\n        case Actions.OPEN_EDIT_CONTACT_DIALOG:\n        {\n            return {\n                ...state,\n                contactDialog: {\n                    type : 'edit',\n                    props: {\n                        open: true\n                    },\n                    data : action.data\n                }\n            };\n        }\n        case Actions.CLOSE_EDIT_CONTACT_DIALOG:\n        {\n            return {\n                ...state,\n                contactDialog: {\n                    type : 'edit',\n                    props: {\n                        open: false\n                    },\n                    data : null\n                }\n            };\n        }\n        default:\n        {\n            return state;\n        }\n    }\n};\n\nexport default contactsReducer;\n","import * as Actions from '../actions';\n\nconst userReducer = function (state = {}, action) {\n    switch ( action.type )\n    {\n        case Actions.GET_USER_DATA:\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;","import {combineReducers} from 'redux';\nimport contacts from './contacts.reducer';\nimport user from './user.reducer';\n\nconst reducer = combineReducers({\n    contacts,\n    user\n});\n\nexport default reducer;\n","import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport {FusePageSimple, FuseAnimate} from '@fuse';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport * as Actions from './store/actions';\nimport ContactsList from 'main/content/apps/contacts/ContactsList';\nimport ContactsHeader from 'main/content/apps/contacts/ContactsHeader';\nimport ContactsSidebarContent from 'main/content/apps/contacts/ContactsSidebarContent';\nimport _ from '@lodash';\nimport {Fab, Icon} from '@material-ui/core';\nimport ContactDialog from 'main/content/apps/contacts/ContactDialog';\nimport withReducer from 'store/withReducer';\nimport reducer from './store/reducers';\n\nconst styles = theme => ({\n    addButton: {\n        position: 'absolute',\n        right   : 12,\n        bottom  : 12,\n        zIndex  : 99\n    }\n});\n\nclass ContactsApp extends Component {\n\n    componentDidMount()\n    {\n        this.props.getContacts(this.props.match.params);\n        this.props.getUserData();\n    }\n\n    componentDidUpdate(prevProps, prevState)\n    {\n        if ( !_.isEqual(this.props.location, prevProps.location) )\n        {\n            this.props.getContacts(this.props.match.params);\n        }\n    }\n\n    render()\n    {\n        const {classes, openNewContactDialog} = this.props;\n\n        return (\n            <React.Fragment>\n                <FusePageSimple\n                    classes={{\n                        contentCardWrapper: \"p-16 sm:p-24 pb-80\",\n                        leftSidebar       : \"w-256\",\n                        header            : \"min-h-72 h-72 sm:h-136 sm:min-h-136\"\n                    }}\n                    header={\n                        <ContactsHeader pageLayout={() => this.pageLayout}/>\n                    }\n                    content={\n                        <ContactsList/>\n                    }\n                    leftSidebarContent={\n                        <ContactsSidebarContent/>\n                    }\n                    sidebarInner\n                    onRef={instance => {\n                        this.pageLayout = instance;\n                    }}\n                    innerScroll\n                />\n                <FuseAnimate animation=\"transition.expandIn\" delay={300}>\n                    <Fab\n                        color=\"primary\"\n                        aria-label=\"add\"\n                        className={classes.addButton}\n                        onClick={openNewContactDialog}\n                    >\n                        <Icon>person_add</Icon>\n                    </Fab>\n                </FuseAnimate>\n                <ContactDialog/>\n            </React.Fragment>\n        )\n    };\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        getContacts         : Actions.getContacts,\n        getUserData         : Actions.getUserData,\n        openNewContactDialog: Actions.openNewContactDialog\n    }, dispatch);\n}\n\nfunction mapStateToProps({contactsApp})\n{\n    return {\n        contacts          : contactsApp.contacts.entities,\n        selectedContactIds: contactsApp.contacts.selectedContactIds,\n        searchText        : contactsApp.contacts.searchText,\n        user              : contactsApp.user\n    }\n}\n\nexport default withReducer('contactsApp', reducer)(withStyles(styles, {withTheme: true})(withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsApp))));\n"],"sourceRoot":""}