{"version":3,"sources":["main/content/apps/scrumboard/store/actions/reorder.js","main/content/apps/scrumboard/model/ListModel.js","main/content/apps/scrumboard/model/CardModel.js","main/content/apps/scrumboard/store/actions/board.actions.js","main/content/apps/scrumboard/model/BoardModel.js","main/content/apps/scrumboard/store/actions/boards.actions.js","main/content/apps/scrumboard/store/actions/card.actions.js","main/content/apps/scrumboard/store/actions/index.js","main/content/apps/scrumboard/store/reducers/boards.reducer.js","main/content/apps/scrumboard/store/reducers/board.reducer.js","main/content/apps/scrumboard/store/reducers/card.reducer.js","main/content/apps/scrumboard/store/reducers/index.js","main/content/apps/scrumboard/boards/Boards.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","Object","slicedToArray","actions_reorder","reorderQuoteMap","lists","source","destination","current","_","find","id","droppableId","next","target","idCards","index","reordered","map","ListModel","data","classCallCheck","this","FuseUtils","generateGUID","name","CardModel","card","description","idAttachmentCover","idMembers","idLabels","attachments","subscribed","checklists","checkItems","checkItemsChecked","comments","activities","due","GET_BOARD","DELETE_BOARD","COPY_BOARD","RENAME_BOARD","CHANGE_BOARD_SETTINGS","RESET_BOARD","ORDER_LIST","ORDER_CARD","ADD_CARD","ADD_LIST","ADD_LABEL","RENAME_LIST","REMOVE_LIST","getBoard","boardId","request","axios","get","dispatch","then","response","type","payload","error","showMessage","message","autoHideDuration","anchorOrigin","vertical","horizontal","history","push","pathname","resetBoard","reorderList","getState","board","scrumboardApp","ordered","post","reorderCard","newCard","listId","cardTitle","Promise","resolve","reject","newList","listTitle","renameList","removeList","addLabel","label","changeBoardSettings","newSettings","settings","merge","deleteBoard","copyBoard","newBoard","uri","Actions","renameBoard","boardTitle","sampleLabels","class","sampleMembers","avatar","BoardModel","color","cardCoverImages","cards","members","labels","GET_BOARDS","RESET_BOARDS","NEW_BOARD","getBoards","resetBoards","handle","OPEN_CARD_DIALOG","CLOSE_CARD_DIALOG","UPDATE_CARD","CHANGE_CARD","REMOVE_CARD","CHIP_CHANGE_CARD","NEW_CHIP_CARD","MAKE_COVER_CARD","REMOVE_COVER_CARD","REMOVE_ATTACHMENT_CARD","REMOVE_DUE_CARD","TOGGLE_LABEL_CARD","TOGGLE_MEMBER_CARD","ADD_CHECKLIST_CARD","CHECKLIST_CHANGE_CARD","CHECKLIST_REMOVE_CARD","COMMENT_ADD_CARD","openCardDialog","closeCardDialog","updateCard","removeCard","cardId","handleChange","event","chipChange","value","addNewChip","makeCover","attachmentId","removeCover","removeAttachment","removeDue","toggleLabel","labelId","toggleMember","memberId","addCheckList","checkListChange","item","removeCheckList","commentAdd","comment","__webpack_require__","d","__webpack_exports__","boards_actions_newBoard","initialState","boardsReducer","state","arguments","length","undefined","action","toConsumableArray","concat","boardReducer","objectSpread","_card","set","cardReducer","setIn","checked","xor","findIndex","x","scrumboardAppReducers","combineReducers","boards","Boards","props","_this$props","classes","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","classNames","root","_fuse__WEBPACK_IMPORTED_MODULE_15__","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","enter","animation","duration","key","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","to","role","onClick","Component","withReducer","reducer","withStyles","theme","background","palette","primary","main","getContrastText","cursor","boxShadow","shadows","transitionProperty","transitionDuration","transitions","short","transitionTimingFunction","easing","easeInOut","dark","&:hover","borderWidth","borderStyle","borderColor","fade","withTheme","withRouter","connect","_ref","bindActionCreators"],"mappings":"iIAGMA,EAAU,SAACC,EAAMC,EAAYC,GAC/B,IAAMC,EAASC,MAAMC,KAAKL,GADkBM,EAE1BH,EAAOI,OAAON,EAAY,GAArCO,EAFqCC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAK5C,OAFAH,EAAOI,OAAOL,EAAU,EAAGM,GAEpBL,GAGXQ,EAAA,EAEaC,EACT,SACIC,EACAC,EACAC,GAEA,IAAMC,EAAUC,IAAEC,KAAKL,EAAO,CAACM,GAAIL,EAAOM,cACpCC,EAAOJ,IAAEC,KAAKL,EAAO,CAACM,GAAIJ,EAAYK,cACtCE,EAASN,EAAQO,QAAQT,EAAOU,OAGtC,GAAKV,EAAOM,cAAgBL,EAAYK,YACxC,CACI,IAAMK,EAAY1B,EACdiB,EAAQO,QACRT,EAAOU,MACPT,EAAYS,OAEhB,OAAOX,EAAMa,IAAI,SAAC1B,GAKd,OAJKA,EAAKmB,KAAOL,EAAOM,cAEpBpB,EAAKuB,QAAUE,GAEZzB,IAWf,OAJAgB,EAAQO,QAAQhB,OAAOO,EAAOU,MAAO,GAErCH,EAAKE,QAAQhB,OAAOQ,EAAYS,MAAO,EAAGF,GAEnCT,EAAMa,IAAI,SAAC1B,GACd,OAAKA,EAAKmB,KAAOL,EAAOM,YAEbJ,EAENhB,EAAKmB,KAAOJ,EAAYK,YAElBC,EAEJrB,4BCxCJ2B,EAVX,SAAAA,EAAYC,GACXnB,OAAAoB,EAAA,EAAApB,CAAAqB,KAAAH,GACG,IAAM3B,EAAO4B,GAAc,GAE3BE,KAAKX,GAAKnB,EAAKmB,IAAMY,IAAUC,eAC/BF,KAAKG,KAAOjC,EAAKiC,MAAQ,GACzBH,KAAKP,QAAU,ICeRW,EArBX,SAAAA,EAAYN,GACXnB,OAAAoB,EAAA,EAAApB,CAAAqB,KAAAI,GACG,IAAMC,EAAOP,GAAc,GAE3BE,KAAKX,GAAKgB,EAAKhB,IAAMY,IAAUC,eAC/BF,KAAKG,KAAOE,EAAKF,MAAQ,GACzBH,KAAKM,YAAcD,EAAKC,aAAe,GACvCN,KAAKO,kBAAoBF,EAAKE,mBAAqB,GACnDP,KAAKQ,UAAYH,EAAKG,WAAa,GACnCR,KAAKS,SAAWJ,EAAKI,UAAY,GACjCT,KAAKU,YAAcL,EAAKK,aAAe,GACvCV,KAAKW,WAAaN,EAAKM,aAAc,EACrCX,KAAKY,WAAaP,EAAKO,YAAc,GACrCZ,KAAKa,WAAaR,EAAKQ,YAAc,EACrCb,KAAKc,kBAAoBT,EAAKS,mBAAqB,EACnDd,KAAKe,SAAWV,EAAKU,UAAY,GACjCf,KAAKgB,WAAaX,EAAKW,YAAc,GACrChB,KAAKiB,IAAMZ,EAAKY,KAAO,aCblBC,EAAY,6BACZC,EAAe,gCACfC,EAAa,8BACbC,EAAe,gCACfC,EAAwB,yCACxBC,EAAc,+BACdC,EAAa,8BACbC,EAAa,8BACbC,EAAW,4BACXC,EAAW,4BACXC,EAAY,6BACZC,EAAc,+BACdC,EAAc,+BAEpB,SAASC,EAASC,GAErB,IAAMC,EAAUC,IAAMC,IAAI,4BAA6B,CAACH,YAExD,OAAO,SAACI,GAAD,OACHH,EAAQI,KACJ,SAACC,GAAD,OACIF,EAAS,CACLG,KAASrB,EACTsB,QAASF,EAASxC,QAE1B,SAAC2C,GACGL,EAASM,YAAY,CACjBC,QAAkBF,EAAMH,SAASxC,KACjC8C,iBAAkB,IAClBC,aAAkB,CACdC,SAAY,MACZC,WAAY,YAGpBC,IAAQC,KAAK,CACTC,SAAU,+BAKvB,SAASC,IAEZ,MAAO,CACHZ,KAAMhB,GAIP,SAAS6B,EAAY/E,GAExB,OAAO,SAAC+D,EAAUiB,GAAa,IAEpBC,EAASD,IAAWE,cAApBD,MACAvE,EAASuE,EAATvE,MAEDyE,EAAUvF,EACZc,EACAV,EAAOW,OAAOU,MACdrB,EAAOY,YAAYS,OAqBvB,OAlBgBwC,IAAMuB,KAAK,iCACvB,CACIzB,QAASsB,EAAMjE,GACfN,MAASyE,IAITnB,KAAK,SAACC,GACVF,EAASM,YAAY,CACjBC,QAAkB,mBAClBC,iBAAkB,IAClBC,aAAkB,CACdC,SAAY,MACZC,WAAY,cAKjBX,EAAS,CACZG,KAASf,EACTgB,QAASgB,KAKd,SAASE,EAAYrF,GAExB,OAAO,SAAC+D,EAAUiB,GAAa,IAEpBC,EAASD,IAAWE,cAApBD,MACAvE,EAASuE,EAATvE,MAEDyE,EAAU1E,EACZC,EACAV,EAAOW,OACPX,EAAOY,aAqBX,OAlBgBiD,IAAMuB,KAAK,iCACvB,CACIzB,QAASsB,EAAMjE,GACfN,MAASyE,IAITnB,KAAK,SAACC,GACVF,EAASM,YAAY,CACjBC,QAAkB,mBAClBC,iBAAkB,IAClBC,aAAkB,CACdC,SAAY,MACZC,WAAY,cAKjBX,EAAS,CACZG,KAASd,EACTe,QAASgB,KAKd,SAASG,EAAQ3B,EAAS4B,EAAQC,GAErC,IAAM/D,EAAO,IAAIM,EAAU,CAACD,KAAM0D,IAE5B5B,EAAUC,IAAMuB,KAAK,+BACvB,CACIzB,UACA4B,SACA9D,SAGR,OAAO,SAACsC,GAAD,OACH,IAAI0B,QAAQ,SAACC,EAASC,GAClB/B,EAAQI,KAAK,SAACC,GAEV,OADAyB,EAAQzB,EAASxC,MACVsC,EAAS,CACZG,KAASb,EACTc,QAASF,EAASxC,YAO/B,SAASmE,EAAQjC,EAASkC,GAE7B,IAAMpE,EAAO,IAAID,EAAU,CAACM,KAAM+D,IAE5BjC,EAAUC,IAAMuB,KAAK,+BACvB,CACIzB,UACAlC,SAIR,OAAO,SAACsC,GAAD,OACHH,EAAQI,KAAK,SAACC,GAAD,OACTF,EAAS,CACLG,KAASZ,EACTa,QAASF,EAASxC,UAK3B,SAASqE,EAAWnC,EAAS4B,EAAQM,GAExC,IAAMjC,EAAUC,IAAMuB,KAAK,kCACvB,CACIzB,UACA4B,SACAM,cAIR,OAAO,SAAC9B,GAAD,OACHH,EAAQI,KAAK,SAACC,GAAD,OACTF,EAAS,CACLG,KAAMV,EACN+B,SACAM,iBAKT,SAASE,EAAWpC,EAAS4B,GAEhC,IAAM3B,EAAUC,IAAMuB,KAAK,kCACvB,CACIzB,UACA4B,WAIR,OAAO,SAACxB,GAAD,OACHH,EAAQI,KAAK,SAACC,GAAD,OACTF,EAAS,CACLG,KAAMT,EACN8B,cAKT,SAASS,EAASC,GAErB,OAAO,SAAClC,GACJ,OAAOA,EAAS,CACZG,KAASX,EACTY,QAAS8B,KAKd,SAASC,EAAoBC,GAEhC,OAAO,SAACpC,EAAUiB,GAAa,IACpBC,EAASD,IAAWE,cAApBD,MACDmB,EAAWtF,IAAEuF,MAAMpB,EAAMmB,SAAUD,GAQzC,OAPgBtC,IAAMuB,KAAK,4CACvB,CACIzB,QAASsB,EAAMjE,GACfoF,aAIOpC,KAAK,SAACC,GAAD,OAChBF,EAAS,CACLG,KAASjB,EACTkB,QAASF,EAASxC,UAM3B,SAAS6E,EAAY3C,GAExB,IAAMC,EAAUC,IAAMuB,KAAK,mCACvB,CACIzB,YAIR,OAAO,SAACI,GAAD,OACHH,EAAQI,KAAK,SAACC,GAMV,OAJAU,IAAQC,KAAK,CACTC,SAAU,4BAGPd,EAAS,CACZG,KAAMpB,OAKf,SAASyD,EAAUtB,GAEtB,IAAMuB,EAAW1F,IAAEuF,MAAMpB,EAAO,CAC5BjE,GAAMY,IAAUC,eAChBC,KAAMmD,EAAMnD,KAAO,YACnB2E,IAAMxB,EAAMwB,IAAM,YAEtB,OAAO,SAAC1C,GAEJ,OADAA,EAAS2C,EAAiBF,IACnB,CAACtC,KAAMnB,IAIf,SAAS4D,EAAYhD,EAASiD,GAEjC,IAAMhD,EAAUC,IAAMuB,KAAK,mCACvB,CACIzB,UACAiD,eAIR,OAAO,SAAC7C,GAAD,OACHH,EAAQI,KAAK,SAACC,GAAD,OACTF,EAAS,CACLG,KAAMlB,EACN4D,kBCnShB,IAAMC,EAAe,CACjB,CACI7F,GAAS,2BACTc,KAAS,gBACTgF,MAAS,qBAEb,CACI9F,GAAS,2BACTc,KAAS,SACTgF,MAAS,wBAEb,CACI9F,GAAS,2BACTc,KAAS,MACTgF,MAAS,sBAEb,CACI9F,GAAS,2BACTc,KAAS,UACTgF,MAAS,wBAIXC,EAAgB,CAClB,CACI/F,GAAU,2BACVc,KAAU,gBACVkF,OAAU,mCAEd,CACIhG,GAAU,2BACVc,KAAU,kBACVkF,OAAU,sCAEd,CACIhG,GAAU,2BACVc,KAAU,cACVkF,OAAU,mCAEd,CACIhG,GAAU,2BACVc,KAAU,WACVkF,OAAU,wCA2BHC,EAnBX,SAAAA,EAAYxF,GACXnB,OAAAoB,EAAA,EAAApB,CAAAqB,KAAAsF,GACG,IAAMhC,EAAQxD,GAAc,GAE5BE,KAAKG,KAAOmD,EAAMnD,MAAQ,iBAC1BH,KAAK8E,IAAMxB,EAAMwB,KAAO,iBACxB9E,KAAKX,GAAKiE,EAAMjE,IAAMY,IAAUC,eAChCF,KAAKyE,SAAWnB,EAAMmB,UAAY,CAC9Bc,MAAiB,GACjB5E,YAAiB,EACjB6E,iBAAiB,GAErBxF,KAAKjB,MAAQ,GACbiB,KAAKyF,MAAQ,GACbzF,KAAK0F,QAAUpC,EAAMoC,SAAWN,EAChCpF,KAAK2F,OAASrC,EAAMqC,QAAUT,GC/DzBU,EAAa,8BACbC,EAAe,gCACfC,EAAY,6BAElB,SAASC,IAEZ,IAAM9D,EAAUC,IAAMC,IAAI,8BAE1B,OAAO,SAACC,GAAD,OACHH,EAAQI,KAAK,SAACC,GAAD,OACTF,EAAS,CACLG,KAASqD,EACTpD,QAASF,EAASxC,UAK3B,SAASkG,IAEZ,MAAO,CACHzD,KAAMsD,GAIP,SAAShB,EAASvB,GAErB,IAAMrB,EAAUC,IAAMuB,KAAK,gCAAiC,CACxDH,MAAOA,GAAS,IAAIgC,IAGxB,OAAO,SAAClD,GAAD,OACHH,EAAQI,KAAK,SAACC,GACN,IAAMgB,EAAQhB,EAASxC,KAIvB,OAHAkD,IAAQC,KAAK,CACTC,SAAU,2BAA6BI,EAAMjE,GAAK,IAAMiE,EAAM2C,SAE3D7D,EAAS,CACZG,KAAMuD,EACNxC,aCvCb,IAAM4C,EAAmB,oCACnBC,EAAoB,qCACpBC,EAAc,+BACdC,GAAc,+BACdC,GAAc,+BACdC,GAAmB,qCACnBC,GAAgB,iCAChBC,GAAkB,mCAClBC,GAAoB,qCACpBC,GAAyB,0CACzBC,GAAkB,mCAClBC,GAAoB,qCACpBC,GAAqB,sCACrBC,GAAqB,sCACrBC,GAAwB,yCACxBC,GAAwB,yCACxBC,GAAmB,oCAEzB,SAASC,GAAerH,GAE3B,MAAO,CACHyC,KAAS2D,EACT1D,QAAS1C,GAIV,SAASsH,KAEZ,MAAO,CACH7E,KAAM4D,GAIP,SAASkB,GAAWrF,EAAS3B,GAEhC,OAAO,SAAC+B,GAMJ,OALgBF,IAAMuB,KAAK,kCAAmC,CAC1DzB,UACA3B,SAGWgC,KAAK,SAACC,GAUjB,OATAF,EAASM,YAAY,CACjBC,QAAkB,aAClBC,iBAAkB,IAClBC,aAAkB,CACdC,SAAY,MACZC,WAAY,YAIbX,EAAS,CACZG,KAAS6D,EACT5D,QAASnC,OAMlB,SAASiH,GAAWtF,EAASuF,GAEhC,OAAO,SAACnF,GAMJ,OALgBF,IAAMuB,KAAK,kCAAmC,CAC1DzB,UACAuF,WAGWlF,KAAK,SAACC,GAAD,OAChBF,EAAS,CACLG,KAAM+D,GACNtE,UACAuF,cAMT,SAASC,GAAaC,GAEzB,MAAO,CACHlF,KAAQ8D,GACR7G,OAAQiI,EAAMjI,QAIf,SAASkI,GAAWvH,EAAMwH,GAE7B,MAAO,CACHpF,KAAMgE,GACNpG,OACAwH,SAID,SAASC,GAAWzH,EAAMwH,GAE7B,MAAO,CACHpF,KAAMiE,GACNrG,OACAwH,SAID,SAASE,GAAUC,GAEtB,MAAO,CACHvF,KAAMkE,GACNqB,gBAID,SAASC,KAEZ,MAAO,CACHxF,KAAMmE,IAIP,SAASsB,GAAiBF,GAE7B,MAAO,CACHvF,KAAMoE,GACNmB,gBAID,SAASG,KAEZ,MAAO,CACH1F,KAAMqE,IAIP,SAASsB,GAAYC,GAExB,MAAO,CACH5F,KAAMsE,GACNsB,WAID,SAASC,GAAaC,GAEzB,MAAO,CACH9F,KAAMuE,GACNuB,YAID,SAASC,GAAarE,GAEzB,MAAO,CACH1B,KAAMwE,GACN9C,WAID,SAASsE,GAAgBC,GAE5B,MAAO,CACHjG,KAAMyE,GACNwB,QAID,SAASC,GAAgBpJ,GAE5B,MAAO,CACHkD,KAAM0E,GACN5H,MAKD,SAASqJ,GAAWC,GAEvB,MAAO,CACHpG,KAAM2E,GACNyB,WCrLRC,EAAAC,EAAAC,EAAA,sBAAA5H,IAAA0H,EAAAC,EAAAC,EAAA,sBAAA3H,IAAAyH,EAAAC,EAAAC,EAAA,sBAAAzH,IAAAuH,EAAAC,EAAAC,EAAA,sBAAAxH,IAAAsH,EAAAC,EAAAC,EAAA,sBAAAvH,IAAAqH,EAAAC,EAAAC,EAAA,sBAAAtH,IAAAoH,EAAAC,EAAAC,EAAA,sBAAArH,IAAAmH,EAAAC,EAAAC,EAAA,sBAAApH,IAAAkH,EAAAC,EAAAC,EAAA,sBAAAnH,IAAAiH,EAAAC,EAAAC,EAAA,sBAAAlH,IAAAgH,EAAAC,EAAAC,EAAA,sBAAAjH,IAAA+G,EAAAC,EAAAC,EAAA,sBAAAhH,IAAA8G,EAAAC,EAAAC,EAAA,sBAAA/G,IAAA6G,EAAAC,EAAAC,EAAA,uBAAA3F,IAAAyF,EAAAC,EAAAC,EAAA,uBAAA1F,IAAAwF,EAAAC,EAAAC,EAAA,uBAAApF,IAAAkF,EAAAC,EAAAC,EAAA,sBAAAnF,IAAAiF,EAAAC,EAAAC,EAAA,sBAAA7E,IAAA2E,EAAAC,EAAAC,EAAA,uBAAA3E,IAAAyE,EAAAC,EAAAC,EAAA,uBAAA1E,IAAAwE,EAAAC,EAAAC,EAAA,sBAAAzE,IAAAuE,EAAAC,EAAAC,EAAA,sBAAAvE,IAAAqE,EAAAC,EAAAC,EAAA,sBAAAnE,IAAAiE,EAAAC,EAAAC,EAAA,sBAAAlE,IAAAgE,EAAAC,EAAAC,EAAA,uBAAA9D,IAAA4D,EAAAC,EAAAC,EAAA,sBAAAlD,IAAAgD,EAAAC,EAAAC,EAAA,sBAAAjD,IAAA+C,EAAAC,EAAAC,EAAA,sBAAAhD,IAAA8C,EAAAC,EAAAC,EAAA,sBAAA/C,IAAA6C,EAAAC,EAAAC,EAAA,uBAAA9C,IAAA4C,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAA5C,IAAA0C,EAAAC,EAAAC,EAAA,sBAAA3C,IAAAyC,EAAAC,EAAAC,EAAA,sBAAA1C,IAAAwC,EAAAC,EAAAC,EAAA,sBAAAzC,KAAAuC,EAAAC,EAAAC,EAAA,sBAAAxC,KAAAsC,EAAAC,EAAAC,EAAA,sBAAAvC,KAAAqC,EAAAC,EAAAC,EAAA,sBAAAtC,KAAAoC,EAAAC,EAAAC,EAAA,sBAAArC,KAAAmC,EAAAC,EAAAC,EAAA,sBAAApC,KAAAkC,EAAAC,EAAAC,EAAA,sBAAAnC,KAAAiC,EAAAC,EAAAC,EAAA,sBAAAlC,KAAAgC,EAAAC,EAAAC,EAAA,sBAAAjC,KAAA+B,EAAAC,EAAAC,EAAA,sBAAAhC,KAAA8B,EAAAC,EAAAC,EAAA,sBAAA/B,KAAA6B,EAAAC,EAAAC,EAAA,sBAAA9B,KAAA4B,EAAAC,EAAAC,EAAA,sBAAA7B,KAAA2B,EAAAC,EAAAC,EAAA,sBAAA5B,KAAA0B,EAAAC,EAAAC,EAAA,sBAAA3B,KAAAyB,EAAAC,EAAAC,EAAA,sBAAA1B,KAAAwB,EAAAC,EAAAC,EAAA,uBAAAzB,KAAAuB,EAAAC,EAAAC,EAAA,sBAAAxB,KAAAsB,EAAAC,EAAAC,EAAA,sBAAAtB,KAAAoB,EAAAC,EAAAC,EAAA,sBAAApB,KAAAkB,EAAAC,EAAAC,EAAA,sBAAAlB,KAAAgB,EAAAC,EAAAC,EAAA,sBAAAjB,KAAAe,EAAAC,EAAAC,EAAA,uBAAAf,KAAAa,EAAAC,EAAAC,EAAA,sBAAAd,KAAAY,EAAAC,EAAAC,EAAA,uBAAAb,KAAAW,EAAAC,EAAAC,EAAA,uBAAAZ,KAAAU,EAAAC,EAAAC,EAAA,uBAAAV,KAAAQ,EAAAC,EAAAC,EAAA,sBAAAR,KAAAM,EAAAC,EAAAC,EAAA,sBAAAP,KAAAK,EAAAC,EAAAC,EAAA,uBAAAL,KAAAG,EAAAC,EAAAC,EAAA,sBAAAJ,sECEMM,EAAe,GA4BNC,EA1BO,WAAwC,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBH,EAAcM,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1D,OAASC,EAAO/G,MAEZ,KAAKwC,IAGD,OAAOpG,OAAA4K,EAAA,EAAA5K,CACA2K,EAAO9G,SAGlB,KAAKuC,IAED,OAAOpG,OAAA4K,EAAA,EAAA5K,CACAuK,GADPM,OAAA,CAEIF,EAAOhG,QAGf,KAAKyB,IAED,MAAO,GAEX,QACI,OAAOmE,mBCgGJO,EArHM,WAAwC,IAA9BP,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFxC,KAEgCG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAASC,EAAO/G,MAEZ,KAAKwC,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACA2K,EAAO9G,SAGlB,KAAKuC,IAED,OAbS,KAeb,KAAKA,IAOL,KAAKA,IAOL,KAAKA,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEInK,MAAOuK,EAAO9G,UAGtB,KAAKuC,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACA2K,EAAO9G,SAGlB,KAAKuC,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEIvD,OAAOhH,OAAA4K,EAAA,EAAA5K,CACAuK,EAAMvD,QADP6D,OAAA,CAEFF,EAAO9G,YAInB,KAAKuC,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEIzD,MAAOyD,EAAMzD,MAAM7F,IAAI,SAAC+J,GACpB,OAAKA,EAAMtK,KAAOiK,EAAO9G,QAAQnD,GAEtBiK,EAAO9G,QAEXmH,MAInB,KAAK5E,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEIzD,MAAOtG,IAAE6E,OAAOkF,EAAMzD,MAAO,CAACpG,GAAIiK,EAAO/B,SACzCxI,MAAOmK,EAAMnK,MAAMa,IAAI,SAAA1B,GAEnB,OADAiB,IAAEyK,IAAI1L,EAAM,UAAWiB,IAAE6E,OAAO9F,EAAKuB,QAAS,SAACJ,GAAD,OAAQA,IAAOiK,EAAO/B,UAC7DrJ,MAInB,KAAK6G,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEInK,MAAOmK,EAAMnK,MAAMa,IAAI,SAAA1B,GAKnB,OAJKA,EAAKmB,KAAOiK,EAAO1F,SAEpB1F,EAAKiC,KAAOmJ,EAAOpF,WAEhBhG,MAInB,KAAK6G,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEInK,MAAOI,IAAE6E,OAAOkF,EAAMnK,MAAO,CAACM,GAAIiK,EAAO1F,WAGjD,KAAKmB,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEIzE,SAAU6E,EAAO9G,UAGzB,KAAKuC,IAED,OAzGS,KA2Gb,KAAKA,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEI/I,KAAMmJ,EAAOrE,aAGrB,QACI,OAAOiE,IClCJW,EA/EK,WAAwC,IAA9BX,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFvC,KAE+BG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxD,OAASC,EAAO/G,MAEZ,KAAKwC,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACA2K,EAAO9G,SAGlB,KAAKuC,IAIL,KAAKA,IAED,OAAO,KAEX,KAAKA,IAED,OAAO5F,IAAE2K,MAAMZ,EAAOI,EAAO9J,OAAOW,KAA6B,aAAvBmJ,EAAO9J,OAAO+C,KAAsB+G,EAAO9J,OAAOuK,QAAUT,EAAO9J,OAAOmI,OAExH,KAAK5C,IAED,OAAO5F,IAAE2K,MAAMZ,EAAOI,EAAOnJ,KAAMmJ,EAAO3B,MAAM/H,IAAI,SAAA4I,GAAI,OAAIA,EAAKb,SAErE,KAAK5C,IAED,OAAO5F,IAAE2K,MAAMZ,EAAOI,EAAOnJ,KAAtBxB,OAAA4K,EAAA,EAAA5K,CAAgCuK,EAAMI,EAAOnJ,OAA7CqJ,OAAA,CAAoDF,EAAO3B,SAEtE,KAAK5C,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,oBAAqBI,EAAOxB,cAEtD,KAAK/C,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,oBAAqB,IAE/C,KAAKnE,IAED,OAAOpG,OAAA+K,EAAA,EAAA/K,CAAA,GACAuK,EADP,CAEIxI,YAAmBvB,IAAE6E,OAAOkF,EAAMxI,YAAa,CAACrB,GAAIiK,EAAOxB,eAC3DvH,kBAAmB2I,EAAM3I,oBAAsB+I,EAAOxB,aAAe,GAAKoB,EAAM3I,oBAGxF,KAAKwE,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,MAAO,MAEjC,KAAKnE,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,WAAY/J,IAAE6K,IAAId,EAAMzI,SAAU,CAAC6I,EAAOnB,WAEpE,KAAKpD,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,YAAa/J,IAAE6K,IAAId,EAAM1I,UAAW,CAAC8I,EAAOjB,YAEtE,KAAKtD,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,aAAfvK,OAAA4K,EAAA,EAAA5K,CAAiCuK,EAAMtI,YAAvC4I,OAAA,CAAmDF,EAAOrF,WAErE,KAAKc,IAED,IAAMrF,EAAQwJ,EAAMtI,WAAWqJ,UAAU,SAACC,GAAD,OAAOA,EAAE7K,KAAOiK,EAAOd,KAAKnJ,KACrE,OAAOF,IAAE2K,MAAMZ,EAAR,cAAAM,OAA6B9J,EAA7B,KAAuC4J,EAAOd,MAEzD,KAAKzD,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,aAAc/J,IAAE6E,OAAOkF,EAAMtI,WAAY,CAACvB,GAAIiK,EAAOjK,MAE/E,KAAK0F,IAED,OAAO5F,IAAE2K,MAAMZ,EAAO,aAAf,CAA8BI,EAAOX,SAArCa,OAAA7K,OAAA4K,EAAA,EAAA5K,CAAiDuK,EAAMlI,cAElE,QACI,OAAOkI,IC3EbiB,EAAwBC,YAAgB,CAC1CC,SACA/G,QACAjD,SAGW8J,yNC6BTG,8LAIEtK,KAAKuK,MAAMxE,2DAKX/F,KAAKuK,MAAMvE,+CAIf,IAAAwE,EACwCxK,KAAKuK,MAAlCE,EADXD,EACWC,QAASJ,EADpBG,EACoBH,OAAQxF,EAD5B2F,EAC4B3F,SAExB,OACI6F,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWL,EAAQM,KAAM,wDAErCL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACK,EAAA,GAAD,CAAYJ,UAAU,sDAAsDtF,MAAM,WAAlF,mBAGJmF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACIH,UAAU,mDACVK,MAAO,CACHC,UAAW,0BACXC,SAAW,MAGdf,EAAOzK,IAAI,SAAA0D,GAAK,OACboH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBQ,IAAK/H,EAAMjE,IACzCqL,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACIC,GAAI,2BAA6BjI,EAAMjE,GAAK,IAAMiE,EAAMwB,IACxD+F,UAAWC,IAAWL,EAAQnH,MAAO,yEACrCkI,KAAK,UAELd,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMJ,UAAU,WAAhB,cACAH,EAAAC,EAAAC,cAACK,EAAA,GAAD,CAAYJ,UAAU,2CAA2CtF,MAAM,WAAWjC,EAAMnD,UAIpGuK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OACIC,UAAWC,IAAWL,EAAQnH,MAAOmH,EAAQ5F,SAAU,yEACvD4G,QAAS,kBAAM5G,MAEf6F,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMJ,UAAU,WAAhB,cACAH,EAAAC,EAAAC,cAACK,EAAA,GAAD,CAAYJ,UAAU,2CAA2CtF,MAAM,WAAvE,6BAjDXmG,aA4ENC,sBAAY,gBAAiBC,IAA7BD,CAAsCE,qBAxGtC,SAAAC,GAAK,MAAK,CACrBf,KAAU,CACNgB,WAAYD,EAAME,QAAQC,QAAQC,KAClC3G,MAAYuG,EAAME,QAAQG,gBAAgBL,EAAME,QAAQC,QAAQC,OAEpE5I,MAAU,CACN8I,OAA0B,UAC1BC,UAA0BP,EAAMQ,QAAQ,GACxCC,mBAA0B,0BAC1BC,mBAA0BV,EAAMW,YAAYrB,SAASsB,MACrDC,yBAA0Bb,EAAMW,YAAYG,OAAOC,UACnDd,WAA0BD,EAAME,QAAQC,QAAQa,KAChDvH,MAA0BuG,EAAME,QAAQG,gBAAgBL,EAAME,QAAQC,QAAQa,MAC9EC,UAA0B,CACtBV,UAAWP,EAAMQ,QAAQ,KAGjCzH,SAAU,CACNmI,YAAa,EACbC,YAAa,SACbC,YAAaC,eAAKrB,EAAME,QAAQG,gBAAgBL,EAAME,QAAQC,QAAQC,MAAO,IAC7Ea,UAAa,CACTG,YAAaC,eAAKrB,EAAME,QAAQG,gBAAgBL,EAAME,QAAQC,QAAQC,MAAO,QAkFjB,CAACkB,WAAW,GAA/BvB,CAAsCwB,YAAWC,YAPtG,SAAAC,GAEI,MAAO,CACHlD,OAFRkD,EAD0BhK,cAGI8G,SAZ9B,SAA4BjI,GAExB,OAAOoL,YAAmB,CACtBzH,UAAahB,IACbiB,YAAajB,KACbF,SAAaE,KACd3C,IAU+FkL,CAA6ChD","file":"static/js/17.b6601bdb.chunk.js","sourcesContent":["import _ from '@lodash';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap =\n    (\n        lists,\n        source,\n        destination\n    ) => {\n        const current = _.find(lists, {id: source.droppableId});\n        const next = _.find(lists, {id: destination.droppableId});\n        const target = current.idCards[source.index];\n\n        // moving to same list\n        if ( source.droppableId === destination.droppableId )\n        {\n            const reordered = reorder(\n                current.idCards,\n                source.index,\n                destination.index\n            );\n            return lists.map((list) => {\n                if ( list.id === source.droppableId )\n                {\n                    list.idCards = reordered;\n                }\n                return list;\n            });\n        }\n\n        // moving to different list\n\n        // remove from original\n        current.idCards.splice(source.index, 1);\n        // insert into next\n        next.idCards.splice(destination.index, 0, target);\n\n        return lists.map((list) => {\n            if ( list.id === source.droppableId )\n            {\n                return current;\n            }\n            if ( list.id === destination.droppableId )\n            {\n                return next;\n            }\n            return list;\n        });\n    };\n","import {FuseUtils} from '@fuse/index';\n\nclass ListModel {\n    /**\n     * Constructor\n     */\n    constructor(data)\n    {\n        const list = data ? data : {};\n\n        this.id = list.id || FuseUtils.generateGUID();\n        this.name = list.name || '';\n        this.idCards = [];\n    }\n}\n\nexport default ListModel;\n","import {FuseUtils} from '@fuse';\n\nclass CardModel {\n    /**\n     * Constructor\n     */\n    constructor(data)\n    {\n        const card = data ? data : {};\n\n        this.id = card.id || FuseUtils.generateGUID();\n        this.name = card.name || '';\n        this.description = card.description || '';\n        this.idAttachmentCover = card.idAttachmentCover || '';\n        this.idMembers = card.idMembers || [];\n        this.idLabels = card.idLabels || [];\n        this.attachments = card.attachments || [];\n        this.subscribed = card.subscribed || true;\n        this.checklists = card.checklists || [];\n        this.checkItems = card.checkItems || 0;\n        this.checkItemsChecked = card.checkItemsChecked || 0;\n        this.comments = card.comments || [];\n        this.activities = card.activities || [];\n        this.due = card.due || '';\n    }\n}\n\nexport default CardModel;\n","import axios from 'axios/index';\nimport reorder, {reorderQuoteMap} from './reorder';\nimport {showMessage} from 'store/actions/fuse';\nimport ListModel from '../../model/ListModel';\nimport CardModel from '../../model/CardModel';\nimport history from 'history.js';\nimport _ from '@lodash';\nimport * as Actions from './index';\nimport {FuseUtils} from '@fuse';\n\nexport const GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport const DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport const COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport const RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport const CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport const RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport const ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport const ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport const ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport const ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport const ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport const RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport const REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\n\nexport function getBoard(boardId)\n{\n    const request = axios.get('/api/scrumboard-app/board', {boardId});\n\n    return (dispatch) =>\n        request.then(\n            (response) =>\n                dispatch({\n                    type   : GET_BOARD,\n                    payload: response.data\n                }),\n            (error) => {\n                dispatch(showMessage({\n                    message         : error.response.data,\n                    autoHideDuration: 2000,\n                    anchorOrigin    : {\n                        vertical  : 'top',\n                        horizontal: 'right'\n                    }\n                }));\n                history.push({\n                    pathname: '/apps/scrumboard/boards'\n                });\n            });\n}\n\nexport function resetBoard()\n{\n    return {\n        type: RESET_BOARD\n    };\n}\n\nexport function reorderList(result)\n{\n    return (dispatch, getState) => {\n\n        const {board} = getState().scrumboardApp;\n        const {lists} = board;\n\n        const ordered = reorder(\n            lists,\n            result.source.index,\n            result.destination.index\n        );\n\n        const request = axios.post('/api/scrumboard-app/list/order',\n            {\n                boardId: board.id,\n                lists  : ordered\n            }\n        );\n\n        request.then((response) => {\n            dispatch(showMessage({\n                message         : 'List Order Saved',\n                autoHideDuration: 2000,\n                anchorOrigin    : {\n                    vertical  : 'top',\n                    horizontal: 'right'\n                }\n            }));\n        });\n\n        return dispatch({\n            type   : ORDER_LIST,\n            payload: ordered\n        });\n    }\n}\n\nexport function reorderCard(result)\n{\n    return (dispatch, getState) => {\n\n        const {board} = getState().scrumboardApp;\n        const {lists} = board;\n\n        const ordered = reorderQuoteMap(\n            lists,\n            result.source,\n            result.destination\n        );\n\n        const request = axios.post('/api/scrumboard-app/card/order',\n            {\n                boardId: board.id,\n                lists  : ordered\n            }\n        );\n\n        request.then((response) => {\n            dispatch(showMessage({\n                message         : 'Card Order Saved',\n                autoHideDuration: 2000,\n                anchorOrigin    : {\n                    vertical  : 'top',\n                    horizontal: 'right'\n                }\n            }));\n        });\n\n        return dispatch({\n            type   : ORDER_CARD,\n            payload: ordered\n        });\n    }\n}\n\nexport function newCard(boardId, listId, cardTitle)\n{\n    const data = new CardModel({name: cardTitle});\n\n    const request = axios.post('/api/scrumboard-app/card/new',\n        {\n            boardId,\n            listId,\n            data\n        }\n    );\n    return (dispatch) =>\n        new Promise((resolve, reject) => {\n            request.then((response) => {\n                resolve(response.data);\n                return dispatch({\n                    type   : ADD_CARD,\n                    payload: response.data\n                });\n            });\n        });\n}\n\n\nexport function newList(boardId, listTitle)\n{\n    const data = new ListModel({name: listTitle});\n\n    const request = axios.post('/api/scrumboard-app/list/new',\n        {\n            boardId,\n            data\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type   : ADD_LIST,\n                payload: response.data\n            })\n        );\n}\n\nexport function renameList(boardId, listId, listTitle)\n{\n    const request = axios.post('/api/scrumboard-app/list/rename',\n        {\n            boardId,\n            listId,\n            listTitle\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type: RENAME_LIST,\n                listId,\n                listTitle\n            })\n        );\n}\n\nexport function removeList(boardId, listId)\n{\n    const request = axios.post('/api/scrumboard-app/list/remove',\n        {\n            boardId,\n            listId\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type: REMOVE_LIST,\n                listId\n            })\n        );\n}\n\nexport function addLabel(label)\n{\n    return (dispatch) => {\n        return dispatch({\n            type   : ADD_LABEL,\n            payload: label\n        })\n    }\n}\n\nexport function changeBoardSettings(newSettings)\n{\n    return (dispatch, getState) => {\n        const {board} = getState().scrumboardApp;\n        const settings = _.merge(board.settings, newSettings);\n        const request = axios.post('/api/scrumboard-app/board/settings/update',\n            {\n                boardId: board.id,\n                settings\n            }\n        );\n\n        return request.then((response) =>\n            dispatch({\n                type   : CHANGE_BOARD_SETTINGS,\n                payload: response.data\n            })\n        );\n    }\n}\n\nexport function deleteBoard(boardId)\n{\n    const request = axios.post('/api/scrumboard-app/board/delete',\n        {\n            boardId\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) => {\n\n            history.push({\n                pathname: '/apps/scrumboard/boards'\n            });\n\n            return dispatch({\n                type: DELETE_BOARD\n            });\n        })\n}\n\nexport function copyBoard(board)\n{\n    const newBoard = _.merge(board, {\n        id  : FuseUtils.generateGUID(),\n        name: board.name + ' (Copied)',\n        uri : board.uri + '-copied'\n    });\n    return (dispatch) => {\n        dispatch(Actions.newBoard(newBoard));\n        return {type: COPY_BOARD};\n    }\n}\n\nexport function renameBoard(boardId, boardTitle)\n{\n    const request = axios.post('/api/scrumboard-app/board/rename',\n        {\n            boardId,\n            boardTitle\n        }\n    );\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type: RENAME_BOARD,\n                boardTitle\n            }));\n}\n","import {FuseUtils} from '@fuse';\n\nconst sampleLabels = [\n    {\n        'id'   : '26022e4129ad3a5sc28b36cd',\n        'name' : 'High Priority',\n        'class': 'bg-red text-white'\n    },\n    {\n        'id'   : '56027e4119ad3a5dc28b36cd',\n        'name' : 'Design',\n        'class': 'bg-orange text-white'\n    },\n    {\n        'id'   : '5640635e19ad3a5dc21416b2',\n        'name' : 'App',\n        'class': 'bg-blue text-white'\n    },\n    {\n        'id'   : '6540635g19ad3s5dc31412b2',\n        'name' : 'Feature',\n        'class': 'bg-green text-white'\n    }\n];\n\nconst sampleMembers = [\n    {\n        'id'    : '56027c1930450d8bf7b10758',\n        'name'  : 'Alice Freeman',\n        'avatar': 'assets/images/avatars/alice.jpg'\n    },\n    {\n        'id'    : '26027s1930450d8bf7b10828',\n        'name'  : 'Danielle Obrien',\n        'avatar': 'assets/images/avatars/danielle.jpg'\n    },\n    {\n        'id'    : '76027g1930450d8bf7b10958',\n        'name'  : 'James Lewis',\n        'avatar': 'assets/images/avatars/james.jpg'\n    },\n    {\n        'id'    : '36027j1930450d8bf7b10158',\n        'name'  : 'John Doe',\n        'avatar': 'assets/images/avatars/Velazquez.jpg'\n    }\n];\n\nclass BoardModel {\n    /**\n     * Constructor\n     */\n    constructor(data)\n    {\n        const board = data ? data : {};\n\n        this.name = board.name || 'Untitled Board';\n        this.uri = board.uri || 'untitled-board';\n        this.id = board.id || FuseUtils.generateGUID();\n        this.settings = board.settings || {\n            color          : '',\n            subscribed     : true,\n            cardCoverImages: true\n        };\n        this.lists = [];\n        this.cards = [];\n        this.members = board.members || sampleMembers;\n        this.labels = board.labels || sampleLabels;\n    }\n}\n\nexport default BoardModel;\n","import axios from 'axios/index';\nimport history from 'history.js';\nimport BoardModel from 'main/content/apps/scrumboard/model/BoardModel';\n\nexport const GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport const RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport const NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\n\nexport function getBoards()\n{\n    const request = axios.get('/api/scrumboard-app/boards');\n\n    return (dispatch) =>\n        request.then((response) =>\n            dispatch({\n                type   : GET_BOARDS,\n                payload: response.data\n            })\n        );\n}\n\nexport function resetBoards()\n{\n    return {\n        type: RESET_BOARDS\n    }\n}\n\nexport function newBoard(board)\n{\n    const request = axios.post('/api/scrumboard-app/board/new', {\n        board: board || new BoardModel()\n    });\n\n    return (dispatch) =>\n        request.then((response) => {\n                const board = response.data;\n                history.push({\n                    pathname: '/apps/scrumboard/boards/' + board.id + '/' + board.handle\n                });\n                return dispatch({\n                    type: NEW_BOARD,\n                    board\n                })\n            }\n        );\n}\n","import axios from 'axios/index';\nimport {showMessage} from 'store/actions/fuse';\n\nexport const OPEN_CARD_DIALOG = '[SCRUMBOARD APP] OPEN CARD DIALOG';\nexport const CLOSE_CARD_DIALOG = '[SCRUMBOARD APP] CLOSE CARD DIALOG';\nexport const UPDATE_CARD = '[SCRUMBOARD APP] UPDATE CARD';\nexport const CHANGE_CARD = '[SCRUMBOARD APP] CHANGE CARD';\nexport const REMOVE_CARD = '[SCRUMBOARD APP] REMOVE CARD';\nexport const CHIP_CHANGE_CARD = '[SCRUMBOARD APP] CHIP CHANGED CARD';\nexport const NEW_CHIP_CARD = '[SCRUMBOARD APP] NEW CHIP CARD';\nexport const MAKE_COVER_CARD = '[SCRUMBOARD APP] MAKE COVER CARD';\nexport const REMOVE_COVER_CARD = '[SCRUMBOARD APP] REMOVE COVER CARD';\nexport const REMOVE_ATTACHMENT_CARD = '[SCRUMBOARD APP] REMOVE ATTACHMENT CARD';\nexport const REMOVE_DUE_CARD = '[SCRUMBOARD APP] REMOVE DUE CARD';\nexport const TOGGLE_LABEL_CARD = '[SCRUMBOARD APP] TOGGLE LABEL CARD';\nexport const TOGGLE_MEMBER_CARD = '[SCRUMBOARD APP] TOGGLE MEMBER CARD';\nexport const ADD_CHECKLIST_CARD = '[SCRUMBOARD APP] ADD CHECKLIST CARD';\nexport const CHECKLIST_CHANGE_CARD = '[SCRUMBOARD APP] CHECKLIST CHANGE CARD';\nexport const CHECKLIST_REMOVE_CARD = '[SCRUMBOARD APP] CHECKLIST REMOVE CARD';\nexport const COMMENT_ADD_CARD = '[SCRUMBOARD APP] COMMENT ADD CARD';\n\nexport function openCardDialog(data)\n{\n    return {\n        type   : OPEN_CARD_DIALOG,\n        payload: data\n    }\n}\n\nexport function closeCardDialog()\n{\n    return {\n        type: CLOSE_CARD_DIALOG\n    }\n}\n\nexport function updateCard(boardId, card)\n{\n    return (dispatch) => {\n        const request = axios.post('/api/scrumboard-app/card/update', {\n            boardId,\n            card\n        });\n\n        return request.then((response) => {\n            dispatch(showMessage({\n                message         : 'Card Saved',\n                autoHideDuration: 2000,\n                anchorOrigin    : {\n                    vertical  : 'top',\n                    horizontal: 'right'\n                }\n            }));\n\n            return dispatch({\n                type   : UPDATE_CARD,\n                payload: card\n            })\n        });\n    }\n}\n\nexport function removeCard(boardId, cardId)\n{\n    return (dispatch) => {\n        const request = axios.post('/api/scrumboard-app/card/remove', {\n            boardId,\n            cardId\n        });\n\n        return request.then((response) =>\n            dispatch({\n                type: REMOVE_CARD,\n                boardId,\n                cardId\n            })\n        );\n    };\n}\n\nexport function handleChange(event)\n{\n    return {\n        type  : CHANGE_CARD,\n        target: event.target\n    };\n}\n\nexport function chipChange(name, value)\n{\n    return {\n        type: CHIP_CHANGE_CARD,\n        name,\n        value\n    };\n}\n\nexport function addNewChip(name, value)\n{\n    return {\n        type: NEW_CHIP_CARD,\n        name,\n        value\n    };\n}\n\nexport function makeCover(attachmentId)\n{\n    return {\n        type: MAKE_COVER_CARD,\n        attachmentId\n    };\n}\n\nexport function removeCover()\n{\n    return {\n        type: REMOVE_COVER_CARD\n    };\n}\n\nexport function removeAttachment(attachmentId)\n{\n    return {\n        type: REMOVE_ATTACHMENT_CARD,\n        attachmentId\n    };\n}\n\nexport function removeDue()\n{\n    return {\n        type: REMOVE_DUE_CARD\n    };\n}\n\nexport function toggleLabel(labelId)\n{\n    return {\n        type: TOGGLE_LABEL_CARD,\n        labelId\n    };\n}\n\nexport function toggleMember(memberId)\n{\n    return {\n        type: TOGGLE_MEMBER_CARD,\n        memberId\n    };\n}\n\nexport function addCheckList(newList)\n{\n    return {\n        type: ADD_CHECKLIST_CARD,\n        newList\n    };\n}\n\nexport function checkListChange(item)\n{\n    return {\n        type: CHECKLIST_CHANGE_CARD,\n        item\n    };\n}\n\nexport function removeCheckList(id)\n{\n    return {\n        type: CHECKLIST_REMOVE_CARD,\n        id\n    };\n}\n\n\nexport function commentAdd(comment)\n{\n    return {\n        type: COMMENT_ADD_CARD,\n        comment\n    };\n}\n","export * from './board.actions';\nexport * from './boards.actions';\nexport * from './card.actions';\n","import * as Actions from '../actions';\n\nconst initialState = [];\n\nconst boardsReducer = function (state = initialState, action) {\n    switch ( action.type )\n    {\n        case Actions.GET_BOARDS:\n        {\n\n            return [\n                ...action.payload\n            ];\n        }\n        case Actions.NEW_BOARD:\n        {\n            return [\n                ...state,\n                action.board\n            ];\n        }\n        case Actions.RESET_BOARDS:\n        {\n            return [];\n        }\n        default:\n            return state;\n    }\n};\n\nexport default boardsReducer;\n","import * as Actions from '../actions';\nimport _ from '@lodash';\n\nconst initialState = null;\n\nconst boardReducer = function (state = initialState, action) {\n    switch ( action.type )\n    {\n        case Actions.GET_BOARD:\n        {\n            return {\n                ...action.payload\n            };\n        }\n        case Actions.RESET_BOARD:\n        {\n            return initialState;\n        }\n        case Actions.ORDER_LIST:\n        {\n            return {\n                ...state,\n                lists: action.payload\n            };\n        }\n        case Actions.ORDER_CARD:\n        {\n            return {\n                ...state,\n                lists: action.payload\n            };\n        }\n        case Actions.ADD_LIST:\n        {\n            return {\n                ...state,\n                lists: action.payload\n            };\n        }\n        case Actions.ADD_CARD:\n        {\n            return {\n                ...action.payload\n            };\n        }\n        case Actions.ADD_LABEL:\n        {\n            return {\n                ...state,\n                labels: [\n                    ...state.labels,\n                    action.payload\n                ]\n            };\n        }\n        case Actions.UPDATE_CARD:\n        {\n            return {\n                ...state,\n                cards: state.cards.map((_card) => {\n                    if ( _card.id === action.payload.id )\n                    {\n                        return action.payload;\n                    }\n                    return _card;\n                })\n            };\n        }\n        case Actions.REMOVE_CARD:\n        {\n            return {\n                ...state,\n                cards: _.reject(state.cards, {id: action.cardId}),\n                lists: state.lists.map(list => {\n                    _.set(list, 'idCards', _.reject(list.idCards, (id) => id === action.cardId));\n                    return list;\n                })\n            };\n        }\n        case Actions.RENAME_LIST:\n        {\n            return {\n                ...state,\n                lists: state.lists.map(list => {\n                    if ( list.id === action.listId )\n                    {\n                        list.name = action.listTitle\n                    }\n                    return list;\n                })\n            };\n        }\n        case Actions.REMOVE_LIST:\n        {\n            return {\n                ...state,\n                lists: _.reject(state.lists, {id: action.listId})\n            };\n        }\n        case Actions.CHANGE_BOARD_SETTINGS:\n        {\n            return {\n                ...state,\n                settings: action.payload\n            };\n        }\n        case Actions.DELETE_BOARD:\n        {\n            return initialState;\n        }\n        case Actions.RENAME_BOARD:\n        {\n            return {\n                ...state,\n                name: action.boardTitle\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default boardReducer;\n","import * as Actions from '../actions';\nimport _ from '@lodash';\n\nconst initialState = null;\n\nconst cardReducer = function (state = initialState, action) {\n    switch ( action.type )\n    {\n        case Actions.OPEN_CARD_DIALOG:\n        {\n            return {\n                ...action.payload\n            };\n        }\n        case Actions.REMOVE_CARD:\n        {\n            return null;\n        }\n        case Actions.CLOSE_CARD_DIALOG:\n        {\n            return null;\n        }\n        case Actions.CHANGE_CARD:\n        {\n            return _.setIn(state, action.target.name, action.target.type === 'checkbox' ? action.target.checked : action.target.value);\n        }\n        case Actions.CHIP_CHANGE_CARD:\n        {\n            return _.setIn(state, action.name, action.value.map(item => item.value));\n        }\n        case Actions.NEW_CHIP_CARD:\n        {\n            return _.setIn(state, action.name, [...state[action.name], action.value]);\n        }\n        case Actions.MAKE_COVER_CARD:\n        {\n            return _.setIn(state, 'idAttachmentCover', action.attachmentId);\n        }\n        case Actions.REMOVE_COVER_CARD:\n        {\n            return _.setIn(state, 'idAttachmentCover', '');\n        }\n        case Actions.REMOVE_ATTACHMENT_CARD:\n        {\n            return {\n                ...state,\n                attachments      : _.reject(state.attachments, {id: action.attachmentId}),\n                idAttachmentCover: state.idAttachmentCover === action.attachmentId ? '' : state.idAttachmentCover\n            }\n        }\n        case Actions.REMOVE_DUE_CARD:\n        {\n            return _.setIn(state, 'due', null);\n        }\n        case Actions.TOGGLE_LABEL_CARD:\n        {\n            return _.setIn(state, 'idLabels', _.xor(state.idLabels, [action.labelId]));\n        }\n        case Actions.TOGGLE_MEMBER_CARD:\n        {\n            return _.setIn(state, 'idMembers', _.xor(state.idMembers, [action.memberId]));\n        }\n        case Actions.ADD_CHECKLIST_CARD:\n        {\n            return _.setIn(state, 'checklists', [...state.checklists, action.newList]);\n        }\n        case Actions.CHECKLIST_CHANGE_CARD:\n        {\n            const index = state.checklists.findIndex((x) => x.id === action.item.id);\n            return _.setIn(state, `checklists[${index}]`, action.item);\n        }\n        case Actions.CHECKLIST_REMOVE_CARD:\n        {\n            return _.setIn(state, 'checklists', _.reject(state.checklists, {id: action.id}));\n        }\n        case Actions.COMMENT_ADD_CARD:\n        {\n            return _.setIn(state, 'activities', [action.comment, ...state.activities]);\n        }\n        default:\n            return state;\n    }\n};\n\nexport default cardReducer;\n","import {combineReducers} from 'redux';\nimport boards from './boards.reducer';\nimport board from './board.reducer';\nimport card from './card.reducer';\n\nconst scrumboardAppReducers = combineReducers({\n    boards,\n    board,\n    card\n});\n\nexport default scrumboardAppReducers;\n","import React, {Component} from 'react';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from '../store/actions';\nimport {withStyles, Typography, Icon} from '@material-ui/core';\nimport {Link, withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport classNames from 'classnames';\nimport {fade} from '@material-ui/core/styles/colorManipulator';\nimport {FuseAnimateGroup, FuseAnimate} from '@fuse';\nimport withReducer from 'store/withReducer';\nimport reducer from './../store/reducers';\n\nconst styles = theme => ({\n    root    : {\n        background: theme.palette.primary.main,\n        color     : theme.palette.getContrastText(theme.palette.primary.main)\n    },\n    board   : {\n        cursor                  : 'pointer',\n        boxShadow               : theme.shadows[0],\n        transitionProperty      : 'box-shadow border-color',\n        transitionDuration      : theme.transitions.duration.short,\n        transitionTimingFunction: theme.transitions.easing.easeInOut,\n        background              : theme.palette.primary.dark,\n        color                   : theme.palette.getContrastText(theme.palette.primary.dark),\n        '&:hover'               : {\n            boxShadow: theme.shadows[6]\n        }\n    },\n    newBoard: {\n        borderWidth: 2,\n        borderStyle: 'dashed',\n        borderColor: fade(theme.palette.getContrastText(theme.palette.primary.main), 0.6),\n        '&:hover'  : {\n            borderColor: fade(theme.palette.getContrastText(theme.palette.primary.main), 0.8)\n        }\n    }\n});\n\n\nclass Boards extends Component {\n\n    componentDidMount()\n    {\n        this.props.getBoards();\n    }\n\n    componentWillUnmount()\n    {\n        this.props.resetBoards();\n    }\n\n    render()\n    {\n        const {classes, boards, newBoard} = this.props;\n\n        return (\n            <div className={classNames(classes.root, \"flex flex-grow flex-no-shrink flex-col items-center\")}>\n\n                <FuseAnimate>\n                    <Typography className=\"mt-44 sm:mt-88 sm:py-24 text-32 sm:text-40 font-300\" color=\"inherit\">Scrumboard App</Typography>\n                </FuseAnimate>\n\n                <div>\n                    <FuseAnimateGroup\n                        className=\"flex flex-wrap w-full justify-center py-32 px-16\"\n                        enter={{\n                            animation: \"transition.slideUpBigIn\",\n                            duration : 300\n                        }}\n                    >\n                        {boards.map(board => (\n                            <div className=\"w-224 h-224 p-16\" key={board.id}>\n                                <Link\n                                    to={'/apps/scrumboard/boards/' + board.id + '/' + board.uri}\n                                    className={classNames(classes.board, \"flex flex-col items-center justify-center w-full h-full rounded py-24\")}\n                                    role=\"button\"\n                                >\n                                    <Icon className=\"text-56\">assessment</Icon>\n                                    <Typography className=\"text-16 font-300 text-center pt-16 px-32\" color=\"inherit\">{board.name}</Typography>\n                                </Link>\n                            </div>\n                        ))}\n                        <div className=\"w-224 h-224 p-16\">\n                            <div\n                                className={classNames(classes.board, classes.newBoard, \"flex flex-col items-center justify-center w-full h-full rounded py-24\")}\n                                onClick={() => newBoard()}\n                            >\n                                <Icon className=\"text-56\">add_circle</Icon>\n                                <Typography className=\"text-16 font-300 text-center pt-16 px-32\" color=\"inherit\">Add new board</Typography>\n                            </div>\n                        </div>\n                    </FuseAnimateGroup>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n        getBoards  : Actions.getBoards,\n        resetBoards: Actions.resetBoards,\n        newBoard   : Actions.newBoard\n    }, dispatch);\n}\n\nfunction mapStateToProps({scrumboardApp})\n{\n    return {\n        boards: scrumboardApp.boards\n    }\n}\n\nexport default withReducer('scrumboardApp', reducer)(withStyles(styles, {withTheme: true})(withRouter(connect(mapStateToProps, mapDispatchToProps)(Boards))));\n"],"sourceRoot":""}