(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{2608:function(e,n,a){"use strict";a.r(n);var t=a(10),o=a(11),l=a(13),i=a(12),s=a(14),c=a(0),r=a.n(c),m=a(15),p=a(3),g=a(1),u=a(783),d=a.n(u),h=a(22),b=a(19),D=a(24),E=function(e){function n(){return Object(t.a)(this,n),Object(l.a)(this,Object(i.a)(n).apply(this,arguments))}return Object(s.a)(n,e),Object(o.a)(n,[{key:"render",value:function(){var e=this,n=this.props.classes;return r.a.createElement(p.s,{classes:{root:n.layoutRoot},header:r.a.createElement("div",{className:"flex flex-1 items-center justify-between p-24"},r.a.createElement(g.vb,{variant:"h6"},"FuseDialog")),content:r.a.createElement("div",{className:"p-24 max-w-2xl mx-auto"},r.a.createElement(g.vb,{className:"mb-16",component:"p"},r.a.createElement("code",{className:"language-bash"},"FuseDialog")," is a simple dialog trigger for easily showing dialog messages via redux action. It is located in the",r.a.createElement("code",{className:"language-bash"},"FuseLayout"),"."),r.a.createElement(g.vb,{className:"text-32 mt-32 mb-8",component:"h2"},"Usage"),r.a.createElement(g.vb,{className:"mb-16",component:"p"},"You can show dialog anywhere with dispatching the action openDialog, its using Material-UI's dialog so you can pass the props in the object:"),r.a.createElement(p.l,{component:"pre",className:"language-js"},'\n                        <Button\n                            onClick={() => this.props.openDialog({\n                                children: (\n                                    <React.Fragment>\n                                        <DialogTitle id="alert-dialog-title">Use Google\'s location service?</DialogTitle>\n                                        <DialogContent>\n                                            <DialogContentText id="alert-dialog-description">\n                                                Let Google help apps determine location. This means sending anonymous location data to\n                                                Google, even when no apps are running.\n                                            </DialogContentText>\n                                        </DialogContent>\n                                        <DialogActions>\n                                            <Button onClick={this.props.closeDialog} color="primary">\n                                                Disagree\n                                            </Button>\n                                            <Button onClick={this.props.closeDialog} color="primary" autoFocus>\n                                                Agree\n                                            </Button>\n                                        </DialogActions>\n                                    </React.Fragment>\n                                )\n                            })}\n                            variant="contained"\n                            color="secondary"\n                        >\n                        Open Dialog\n                        </Button>\n                            '),r.a.createElement(g.vb,{className:"text-32 mt-32 mb-8",component:"h2"},"Example"),r.a.createElement(d.a,{onClick:function(){return e.props.openDialog({children:r.a.createElement(r.a.Fragment,null,r.a.createElement(g.p,{id:"alert-dialog-title"},"Use Google's location service?"),r.a.createElement(g.n,null,r.a.createElement(g.o,{id:"alert-dialog-description"},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.")),r.a.createElement(g.m,null,r.a.createElement(d.a,{onClick:e.props.closeDialog,color:"primary"},"Disagree"),r.a.createElement(d.a,{onClick:e.props.closeDialog,color:"primary",autoFocus:!0},"Agree")))})},variant:"contained",color:"secondary"},"Open Dialog"))})}}]),n}(c.Component);n.default=Object(m.withStyles)(function(e){return{layoutRoot:{}}},{withTheme:!0})(Object(h.b)(null,function(e){return Object(b.c)({openDialog:D.g,closeDialog:D.a},e)})(E))}}]);
//# sourceMappingURL=80.c622f441.chunk.js.map